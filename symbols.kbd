(platform (macos linux)
  (defalias
    % S-5
    + S-=
    * S-8
    _ S--
    - -
    = =
    lb S-9
    rb S-0
    { (switch ((or (base-layer rus) (base-layer qwe))) (macro @en 50 S-[ 50 @ru) break () S-[ break )
    ; (switch ((or (base-layer rus) (base-layer qwe))) S-4 break () ; break )
    } (switch ((or (base-layer rus) (base-layer qwe))) (macro @en 50 S-] 50 @ru) break () S-] break )
    ! S-1
    # (switch ((or (base-layer rus) (base-layer qwe))) (macro @en 50 S-3 50 @ru) break () S-3 break)
    $ (switch ((or (base-layer rus) (base-layer qwe))) (macro @en 50 S-4 50 @ru) break () S-4 break)
    & (switch ((or (base-layer rus) (base-layer qwe))) (macro @en 50 S-7 50 @ru) break () S-7 break)
    ' (switch ((or (base-layer rus) (base-layer qwe))) (macro @en 50 ' 50 @ru) break () ' break)
    < (switch ((or (base-layer rus) (base-layer qwe))) (macro @en 50 S-, 50 @ru) break () S-, break)
    > (switch ((or (base-layer rus) (base-layer qwe))) (macro @en 50 S-. 50 @ru) break () S-. break)
    [ (switch ((or (base-layer rus) (base-layer qwe))) (macro @en 50 [ 50 @ru) break () [ break)
    ] (switch ((or (base-layer rus) (base-layer qwe))) (macro @en 50 ] 50 @ru) break () ] break)
    ^ (switch ((or (base-layer rus) (base-layer qwe))) (macro @en 50 S-6 50 @ru) break () S-6 break)
    ` (switch ((or (base-layer rus) (base-layer qwe))) (macro @en 50 grv 50 @ru) break () grv break)
    at (switch ((or (base-layer rus) (base-layer qwe))) (macro @en 50 S-2 50 @ru) break () S-2 break)
    “ (switch ((or (base-layer rus) (base-layer qwe))) S-2 break () S-' break)
    : (switch ((or (base-layer rus) (base-layer qwe))) S-6 break () S-; break)
    | (switch ((or (base-layer rus) (base-layer qwe))) (macro @en 50 S-\ 50 @ru) break () S-\ break)
    ~ (switch ((or (base-layer rus) (base-layer qwe))) (macro @en 50 S-grv 50 @ru) break () S-grv break)
    , (switch ((or (base-layer rus) (base-layer qwe))) S-/ break () , break )
    . (switch ((or (base-layer rus) (base-layer qwe))) / break () . break )
    ? (switch ((or (base-layer rus) (base-layer qwe))) S-7 break () S-/ break )
    / (switch ((or (base-layer rus) (base-layer qwe))) S-\ break () / break )
    \ (unmod \)
    № (switch ((or (base-layer rus) (base-layer qwe))) S-3 break () (macro @ru 50 S-3 50 @en) break)

    ,? (switch ((or (base-layer rus) (base-layer qwe))) (fork S-/ S-7 (lsft rsft)) break () (fork , S-/ (lsft rsft)) break )
    .! (switch ((or (base-layer rus) (base-layer qwe))) (fork / S-1 (lsft rsft)) break () (fork . S-1 (lsft rsft)) break )
    /\ (fork @/ @\ (lsft rsft))

    “” (switch ((or (base-layer rus) (base-layer qwe))) (macro S-2 20 S-2 20 left) break () (macro S-' 20 S-' 20 left) break )
    '' (switch ((or (base-layer rus) (base-layer qwe))) (macro @en 50 ' 20 ' 20 left  50 @ru) break () (macro ' 20 ' 20 left) break )
    `` (switch ((or (base-layer rus) (base-layer qwe))) (macro @en 50 ` 20 ` 20 left  50 @ru) break () (macro ` 20 ` 20 left) break )
    brc (macro S-9 20 S-0 20 left)
    []  (switch ((or (base-layer rus) (base-layer qwe))) (macro @en 50 [ 20 ] 20 left 50 @ru) break () (macro [ 20 ] 20 left) break )
    {}  (switch ((or (base-layer rus) (base-layer qwe))) (macro @en 50 S-[ 20 S-] 20 left 50 @ru) break () (macro S-[ 20 S-] 20 left) break )
    <>  (switch ((or (base-layer rus) (base-layer qwe))) (macro @en 50 S-, 20 S-. 20 left 50 @ru) break () (macro S-, 20 S-. 20 left) break )
    -[] (switch ((or (base-layer rus) (base-layer qwe))) (macro @en 50 @home 20 - 20 spc 20 [ 20 spc 20 ] spc 20 @end 50 @ru) break () (macro @home 20 - 20 spc 20 [ 20 spc 20 ] spc 20 @end) break )

    *' (switch
      ((key-history spc 1)) (macro S-' 20 S-' 20 left) break
      ((and (key-history 0 2) (key-history left 1))) (macro S-' 20 S-' 20 left) break
      ((and (key-history ] 2) (key-history left 1))) (macro S-' 20 S-' 20 left) break
      ((and (key-history , 2) (key-history left 1))) (macro S-' 20 S-' 20 left) break
      () ' break
    )

    *,? (switch
      ((or (key-history . 1) (key-history / 1))) (multi bspc @brc) break
      () @,? break
    )
  )
)

(platform (win winiov2 wintercept)
  (defalias
    % (unicode %)
    + (unicode +)
    * (unicode *)
    _ (unicode _)
    - (unicode -)
    = (unicode =)
    lb (unicode "(")
    rb (unicode ")")
    { (unicode {)
    ; (unicode ;)
    } (unicode })
    ! (unicode !)
    # (unicode #)
    $ (unicode $)
    & (unicode &)
    ' (unicode ')
    < (unicode <)
    > (unicode >)
    [ (unicode [)
    ] (unicode ])
    ^ (unicode ^)
    ` (unicode `)
    at (unicode "@")
    “ (unicode r#"""#)
    : (unicode :)
    | (unicode |)
    ~ (unicode ~)
    , (unicode ,)
    . (unicode .)
    ? (unicode ?)
    / (unicode /)
    \ (unicode \)
    № (unicode №)

    ,? (fork @, @? (lsft rsft))
    .! (fork @. @! (lsft rsft))
    /\ (fork @/ @\ (lsft rsft))

    “” (macro @“ @“ 15 left)
    '' (macro @' @' 15 left)
    `` (macro @` @` 15 left)
    brc (macro @lb 20 @rb 15 left)
    []  (macro @[ 20 @] 15 left)
    {}  (macro @{ 20 @} 15 left)
    <>  (macro @< 20 @> 15 left)
    -[] (macro @home 20 @- 20 spc 20 @[ 20 spc 20 @] 20 spc 20 @end)

    *' (switch
      ((key-history spc 1)) @“” break
      ((and (key-history 0 2) (key-history left 1))) @“” break
      ((and (key-history ] 2) (key-history left 1))) @“” break
      ((and (key-history , 2) (key-history left 1))) @“” break
      () ' break
    )

    *,? (switch
      ((or (key-history . 1) (key-history / 1))) (multi bspc @brc) break
      () @,? break
    )
  )
)
