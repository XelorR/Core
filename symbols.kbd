(defalias
  % S-5
  + S-=
  * S-8
  _ S--
  - -
  lb S-9
  rb S-0
  { (switch ((base-layer rus)) (macro @en 50 S-[ 50 @ru) break () S-[ break )
  ; (switch ((base-layer rus)) S-4 break () ; break )
  } (switch ((base-layer rus)) (macro @en 50 S-] 50 @ru) break () S-] break )
  ! S-1
  # (switch ((base-layer rus)) (macro @en 50 S-3 50 @ru) break () S-3 break)
  $ (switch ((base-layer rus)) (macro @en 50 S-4 50 @ru) break () S-4 break)
  & (switch ((base-layer rus)) (macro @en 50 S-7 50 @ru) break () S-7 break)
  ' (switch ((base-layer rus)) (macro @en 50 ' 50 @ru) break () ' break)
  < (switch ((base-layer rus)) (macro @en 50 S-, 50 @ru) break () S-, break)
  > (switch ((base-layer rus)) (macro @en 50 S-. 50 @ru) break () S-. break)
  [ (switch ((base-layer rus)) (macro @en 50 [ 50 @ru) break () [ break)
  ] (switch ((base-layer rus)) (macro @en 50 ] 50 @ru) break () ] break)
  ^ (switch ((base-layer rus)) (macro @en 50 S-6 50 @ru) break () S-6 break)
  ` (switch ((base-layer rus)) (macro @en 50 grv 50 @ru) break () grv break)
  at (switch ((base-layer rus)) (macro @en 50 S-2 50 @ru) break () S-2 break)
  “ (switch ((base-layer rus)) S-2 break () S-' break)
  : (switch ((base-layer rus)) S-6 break () S-; break)
  | (switch ((base-layer rus)) (macro @en 50 S-\ 50 @ru) break () S-\ break)
  ~ (switch ((base-layer rus)) (macro @en 50 S-grv 50 @ru) break () S-grv break)
  , (switch ((base-layer rus)) S-/ break () , break )
  . (switch ((base-layer rus)) / break () . break )
  ? (switch ((base-layer rus)) S-7 break () S-/ break )
  / (switch ((base-layer rus)) S-\ break () / break )
  \ (unmod \)
  № (switch ((base-layer rus)) S-3 break () (macro @ru 50 S-3 50 @en) break)

  ,? (switch ((base-layer rus)) (fork S-/ S-7 (lsft rsft)) break () (fork , S-/ (lsft rsft)) break )
  .! (switch ((base-layer rus)) (fork / S-1 (lsft rsft)) break () (fork . S-1 (lsft rsft)) break )
  /\ (fork @/ @\ (lsft rsft))

  “” (switch ((base-layer rus)) (macro S-2 20 S-2 20 left) break () (macro S-' 20 S-' 20 left) break )
  '' (switch ((base-layer rus)) (macro @en 50 ' 20 ' 20 left  50 @ru) break () (macro ' 20 ' 20 left) break )
  `` (switch ((base-layer rus)) (macro @en 50 ` 20 ` 20 left  50 @ru) break () (macro ` 20 ` 20 left) break )
  brc (macro S-9 20 S-0 20 left)
  []  (switch ((base-layer rus)) (macro @en 50 [ 20 ] 20 left 50 @ru) break () (macro [ 20 ] 20 left) break )
  {}  (switch ((base-layer rus)) (macro @en 50 S-[ 20 S-] 20 left 50 @ru) break () (macro S-[ 20 S-] 20 left) break )
  <>  (switch ((base-layer rus)) (macro @en 50 S-, 20 S-. 20 left 50 @ru) break () (macro S-, 20 S-. 20 left) break )
  -[] (switch ((base-layer rus)) (macro @en 50 @home 20 - 20 spc 20 [ 20 spc 20 ] spc 20 @end 50 @ru) break () (macro @home 20 - 20 spc 20 [ 20 spc 20 ] spc 20 @end) break )

  *' (switch
    ((key-history spc 1)) (macro S-' 20 S-' 20 left) break
    ((and (key-history 0 2) (key-history left 1))) (macro S-' 20 S-' 20 left) break
    ((and (key-history ] 2) (key-history left 1))) (macro S-' 20 S-' 20 left) break
    ((and (key-history , 2) (key-history left 1))) (macro S-' 20 S-' 20 left) break
    () ' break
  )

  *,? (switch
    ((or (key-history . 1) (key-history / 1))) (multi bspc @brc) break
    () @,? break
  )

)
