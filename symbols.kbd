(platform (macos linux)
  (defalias
    % S-5
    + S-=
    * S-8
    _ S--
    - -
    = =
    lb S-9
    rb S-0
    { (switch ((or (base-layer rus) (base-layer qwe))) (macro @en 50 S-[ 50 @ru) break () S-[ break )
    ; (switch ((or (base-layer rus) (base-layer qwe))) S-4 break () ; break )
    } (switch ((or (base-layer rus) (base-layer qwe))) (macro @en 50 S-] 50 @ru) break () S-] break )
    ! S-1
    # (switch ((or (base-layer rus) (base-layer qwe))) (macro @en 50 S-3 50 @ru) break () S-3 break)
    $ (switch ((or (base-layer rus) (base-layer qwe))) (macro @en 50 S-4 50 @ru) break () S-4 break)
    & (switch ((or (base-layer rus) (base-layer qwe))) (macro @en 50 S-7 50 @ru) break () S-7 break)
    ' (switch ((or (base-layer rus) (base-layer qwe))) (macro @en 50 ' 50 @ru) break () ' break)
    < (switch ((or (base-layer rus) (base-layer qwe))) (macro @en 50 S-, 50 @ru) break () S-, break)
    > (switch ((or (base-layer rus) (base-layer qwe))) (macro @en 50 S-. 50 @ru) break () S-. break)
    [ (switch ((or (base-layer rus) (base-layer qwe))) (macro @en 50 [ 50 @ru) break () [ break)
    ] (switch ((or (base-layer rus) (base-layer qwe))) (macro @en 50 ] 50 @ru) break () ] break)
    ^ (switch ((or (base-layer rus) (base-layer qwe))) (macro @en 50 S-6 50 @ru) break () S-6 break)
    ` (switch ((or (base-layer rus) (base-layer qwe))) (macro @en 50 grv 50 @ru) break () grv break)
    at (switch ((or (base-layer rus) (base-layer qwe))) (macro @en 50 S-2 50 @ru) break () S-2 break)
    “ (switch ((or (base-layer rus) (base-layer qwe))) S-2 break () S-' break)
    : (switch ((or (base-layer rus) (base-layer qwe))) S-6 break () S-; break)
    | (switch ((or (base-layer rus) (base-layer qwe))) (macro @en 50 S-\ 50 @ru) break () S-\ break)
    ~ (switch ((or (base-layer rus) (base-layer qwe))) (macro @en 50 S-grv 50 @ru) break () S-grv break)
    , (switch ((or (base-layer rus) (base-layer qwe))) S-/ break () , break )
    . (switch ((or (base-layer rus) (base-layer qwe))) / break () . break )
    ? (switch ((or (base-layer rus) (base-layer qwe))) S-7 break () S-/ break )
    / (switch ((or (base-layer rus) (base-layer qwe))) S-\ break () / break )
    \ (unmod \)
    № (switch ((or (base-layer rus) (base-layer qwe))) S-3 break () (macro @ru 50 S-3 50 @en) break)

    ,? (switch ((or (base-layer rus) (base-layer qwe))) (fork S-/ S-7 (lsft rsft)) break () (fork , S-/ (lsft rsft)) break )
    .! (switch ((or (base-layer rus) (base-layer qwe))) (fork / S-1 (lsft rsft)) break () (fork . S-1 (lsft rsft)) break )
    /\ (fork @/ @\ (lsft rsft))

    “” (switch ((or (base-layer rus) (base-layer qwe))) (macro S-2 20 S-2 20 left) break () (macro S-' 20 S-' 20 left) break )
    '' (switch ((or (base-layer rus) (base-layer qwe))) (macro @en 50 ' 20 ' 20 left  50 @ru) break () (macro ' 20 ' 20 left) break )
    `` (switch ((or (base-layer rus) (base-layer qwe))) (macro @en 50 ` 20 ` 20 left  50 @ru) break () (macro ` 20 ` 20 left) break )
    brc (macro S-9 20 S-0 20 left)
    []  (switch ((or (base-layer rus) (base-layer qwe))) (macro @en 50 [ 20 ] 20 left 50 @ru) break () (macro [ 20 ] 20 left) break )
    {}  (switch ((or (base-layer rus) (base-layer qwe))) (macro @en 50 S-[ 20 S-] 20 left 50 @ru) break () (macro S-[ 20 S-] 20 left) break )
    <>  (switch ((or (base-layer rus) (base-layer qwe))) (macro @en 50 S-, 20 S-. 20 left 50 @ru) break () (macro S-, 20 S-. 20 left) break )
    -[] (switch ((or (base-layer rus) (base-layer qwe))) (macro @en 50 @home 20 - 20 spc 20 [ 20 spc 20 ] spc 20 @end 50 @ru) break () (macro @home 20 - 20 spc 20 [ 20 spc 20 ] spc 20 @end) break )

    *' (switch
      ((key-history spc 1)) (macro S-' 20 S-' 20 left) break
      ((and (key-history 0 2) (key-history left 1))) (macro S-' 20 S-' 20 left) break
      ((and (key-history ] 2) (key-history left 1))) (macro S-' 20 S-' 20 left) break
      ((and (key-history , 2) (key-history left 1))) (macro S-' 20 S-' 20 left) break
      () ' break
    )

    *,? (switch
      ((or (key-history . 1) (key-history / 1))) (multi bspc @brc) break
      () @,? break
    )
  )
)

(platform (win winiov2 wintercept)
  (defalias
    % (switch ((or (base-layer rus) (base-layer qwe))) (unicode %) break () S-5 break)
    u+ (unicode +)
    + (switch ((or (base-layer rus) (base-layer qwe))) (fork @u+ C-S-= (lctl rctl)) break () S-= break)
    * (switch ((or (base-layer rus) (base-layer qwe))) (unicode *) break () S-8 break)
    _ (switch ((or (base-layer rus) (base-layer qwe))) (unicode _) break () S-- break)
    u- (unicode -)
    - (fork @u- C-- (lctl rctl))
    u= (unicode =)
    = (fork @u= C-= (lctl rctl))
    lb (switch ((or (base-layer rus) (base-layer qwe))) (unicode "(") break () S-9 break)
    rb (switch ((or (base-layer rus) (base-layer qwe))) (unicode ")") break () S-0 break)
    u{ (unicode {)
    { (switch ((or (base-layer rus) (base-layer qwe))) (fork @u{ C-S-[ (lctl rctl)) break () S-[ break)
    ; (switch ((or (base-layer rus) (base-layer qwe))) (unicode ;) break () ; break)
    u} (unicode })
    } (switch ((or (base-layer rus) (base-layer qwe))) (fork @u} C-S-] (lctl rctl)) break () S-] break)
    ! (switch ((or (base-layer rus) (base-layer qwe))) (unicode !) break () S-1 break)
    # (switch ((or (base-layer rus) (base-layer qwe))) (unicode #) break () S-3 break)
    $ (switch ((or (base-layer rus) (base-layer qwe))) (unicode $) break () S-4 break)
    & (switch ((or (base-layer rus) (base-layer qwe))) (unicode &) break () S-7 break)
    ' (switch ((or (base-layer rus) (base-layer qwe))) (unicode ') break () ' break)
    u< (unicode <)
    u> (unicode >)
    < (switch ((or (base-layer rus) (base-layer qwe))) (fork @u< C-S-, (lctl rctl)) break () S-, break)
    > (switch ((or (base-layer rus) (base-layer qwe))) (fork @u> C-S-. (lctl rctl)) break () S-. break)
    u[ (unicode [)
    u] (unicode ])
    [ (switch ((or (base-layer rus) (base-layer qwe))) (fork @u[ C-[ (lctl rctl)) break () [ break)
    ] (switch ((or (base-layer rus) (base-layer qwe))) (fork @u] C-] (lctl rctl)) break () ] break)
    ^ (switch ((or (base-layer rus) (base-layer qwe))) (unicode ^) break () S-6 break)
    ` (switch ((or (base-layer rus) (base-layer qwe))) (unicode `) break () grv break)
    at (switch ((or (base-layer rus) (base-layer qwe))) (unicode "@") break () S-2 break)
    “ (switch ((or (base-layer rus) (base-layer qwe))) (unicode r#"""#) break () S-' break)
    : (switch ((or (base-layer rus) (base-layer qwe))) (unicode :) break () S-; break)
    | (switch ((or (base-layer rus) (base-layer qwe))) (unicode |) break () S-\ break)
    ~ (switch ((or (base-layer rus) (base-layer qwe))) (unicode ~) break () S-grv break)
    , (switch ((or (base-layer rus) (base-layer qwe))) (unicode ,) break () , break)
    . (switch ((or (base-layer rus) (base-layer qwe))) (unicode .) break () . break)
    ? (switch ((or (base-layer rus) (base-layer qwe))) (unicode ?) break () S-/ break)
    / (switch ((or (base-layer rus) (base-layer qwe))) (unicode /) break () / break)
    \ (switch ((or (base-layer rus) (base-layer qwe))) (unicode \) break () \ break)
    № (unicode №)

    ,? (fork @, @? (lsft rsft))
    .! (fork @. @! (lsft rsft))
    /\ (fork @/ @\ (lsft rsft))

    “” (macro @u“ @u“ 15 left)
    '' (macro @u' @u' 15 left)
    `` (macro @u` @u` 15 left)
    brc (macro S-9 20 S-0 15 left)
    []  (macro @u[ 20 @u] 15 left)
    {}  (macro @u{ 20 @u} 15 left)
    <>  (macro @u< 20 @u> 15 left)
    -[] (macro @home 20 - 20 spc 20 @u[ 20 spc 20 @u] 20 spc 20 @end)

    *' (switch
      ((key-history spc 1)) @“” break
      ((and (key-history 0 2) (key-history left 1))) @“” break
      ((and (key-history ] 2) (key-history left 1))) @“” break
      ((and (key-history , 2) (key-history left 1))) @“” break
      () ' break
    )

    *,? (switch
      ((or (key-history . 1) (key-history / 1))) (multi bspc @brc) break
      () @,? break
    )
  )
)
